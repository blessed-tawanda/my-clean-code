//1
public class MyTest{
 public Long computeDurationInMilliseconds(Long hours, Long minutes, Long seconds) {
    Long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
    return duration;
 }

 public void doSomething() throws Exception {
    RuntimeException myException = new RuntimeException();
    throw myException;
 }
}

//2
public class MyClass {
    private int foo = 42;
    public int compute(int a) {
        return a * foo;
    }
}

//3
class StringUtils {
    public static String concatenate(String s1, String s2) {
        return s1 + s2;
    }
}

//4
package my.company;
import java.lang.String;
import my.company.SomeClass;
import java.io.File;
import my.company.SomeType;

class ExampleClass {
 public String someString;
 public SomeType something;
}

//5
public class Example2Class{
 public void foo(String bar) throws Exception {
    throw new RuntimeException("My Message");
 }
}

//6
public class Foo {
 public Collection<User> listUsers() {
    File userList = new File("/home/mylogin/Dev/users.txt");
    Scanner reader = new Scanner(userList);
    Collection<User> users = Collections.emptyList();
    while(reader.hasNextLine()) {
        User user = reader.nextLine();
        users.add(user)
    }
    return users;
 }
}

//7
public class MyFoo{
 public static void main(String[] args) {
    System.out.println("It works");
 }
}

//8
public class MyFoorest{
 // this one is out of context
 public void run() {
    release(execute(prepare("action1")));
 }

 public static void prepare(String string){
    System.out.println(string+" prepared");
 }

 public static void execute(String string){
    System.out.println(string+" executed");
 }

 public static void release(String string){
    System.out.println(string+" released");
 }

}

//9
class ParentClass {
 public void doSomething(){
 System.out.println("Parent doing something");
 }
}
class FirstChildClass extends ParentClass {
 public void doSomething(){
 System.out.println("First born doing something");
 }
}

//10
class MikeClass{
 void doSomething() {
    this.doIt()
 }

 void doIt(){
    System.out.println("I am doing it");
 }
}

//11
public class Address {

}
public class Person implements Serializable {
 private long serialVersionUID = 1905122041950251207L;
 private String name;
 private Address address;
}

//12
public class Mine{
 int foo(int a) {
    int b = 12;
    if (a == 1) {
        return b;
    }
    return a;
 }
}

//13
public class Myclass {
 public int THRESHOLD = 3;
}

//14
class A {
 void process(List<A> list) {
 list.stream()
 .filter(a -> a instanceof B)
 .map(a -> (B) a)
 .map(b -> b.<String>getObject())
 .forEach(b -> { System.out.println(b); });
 }
}
class B extends A {
 <T> T getObject() {
    return null;
 }
}

//15
interface Status {
 public int OPEN = 1;
 public int CLOSED = 2;
}

//16
public class Baidu{
 List<String> strings = new ArrayList<String>();
 Map<strings,List<Integer>> map = new HashMap<strings,List<Integer>>();
}

//17
public class MyBaidu{
    public static void main(String[] args) {
        Boolean b = getBoolean();
        if (b) {
            foo();
        } else {
            bar();
        }
    }
}

//18
public class FirstBaidu{
    public void checkFile(File file){
        if (file != null) {
            if (file.isFile() & file.isDirectory()) {
                System.out.println("File is okay");
            }
        }
    }
}

//19
public class HelloWorld{
 public void myMethod(){
  String message = new Random().nextBoolean() ? "hello world": "My Cat";
  message+=" done";
  System.out.println(message);
 }
}

// 20
public class MyRandom{
 public static void main(String[] args){
    if (booleanMethod()) { /* ... */ }
    if (!booleanMethod()) { /* ... */ }
    if (booleanMethod() || false) { /* ... */ }
    doSomething(true);
    doSomething(booleanMethod() == true);
    booleanVariable = booleanMethod() ? true : false;
    booleanVariable = booleanMethod() ? true : false;
    booleanVariable = booleanMethod() ? false : true;
    booleanVariable = booleanMethod() ? false : true;
    booleanVariable = booleanMethod() ? true : false;
 }
}











